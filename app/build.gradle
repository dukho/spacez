plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.nomadworks.spacez"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode appVersionCode()
        versionName appVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        dataBinding = true
    }

    signingConfigs {
        release {
            keyAlias project.hasProperty('keyAlias') ? project.properties['keyAlias'] : System.getenv('keyAlias')
            keyPassword project.hasProperty('keyPass') ? project.properties['keyPass'] : System.getenv('keyPass')
            storeFile file('spacex.release.keystore')
            storePassword project.hasProperty('keyPass') ? project.properties['keyPass'] : System.getenv('keyPass')
        }
        debug {
            keyAlias 'spacex'
            keyPassword 'space1234'
            storeFile file('spacex.debug.keystore')
            storePassword 'space1234'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def static appVersionCode() {
    println("appVersionCode =" + System.getenv('appVersionCode'))
    return System.getenv('appVersionCode') ? (System.getenv('appVersionCode')).toInteger() : 2021
}

def static appVersionName() {
    def MAJOR = 1
    def MINOR = 0
    def PATCH = 2
    return "$MAJOR.$MINOR.$PATCH"
}

configurations {
    ktlint
}

dependencies {
    implementation project("::base_app")
    implementation project("::feature_latestlaunch")

    // Annotation processor : annotation should be declared even if they were added in the base module because they were required for compilation
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}